#include<cstdio>
#include<vector>
#include<cstring>
#include<cmath>
#include<algorithm>
using namespace std;

int Even(int I, int J);
int Odd(int I, int J);
//int dp[110][110];

int Count_Subsets(int I, int J)
{
    if (I == 1 && J == 1) return 1;
    if (I == 1 && J > 1) return 0;
    if (J < 0) return 0;
    if (I > 0 && J == 0) return 1;
    return (Count_Subsets(I - 1, J) + Count_Subsets(I - 1, J - I));
}

int Even(int I, int J)
{
    if (J > I || J <= 0) return 0;
    if (I == 1 && J == 0) return 0;
    if (I == 2 && J == 1) return 1;
    if (I == 2 && J == 2) return 0;
    return Odd(I - J, J);
}

int Odd(int I, int J)
{
    if (J > I || J <= 0) return 0;
    if (I == 1 && J == 0) return 0;
    if (I == 2 && J == 1) return 0;
    if (I == 2 && J == 2) return 1;
    return Odd(I - 1, J - 1) + Even(I - J, J);
}

int answer4(int n)
{
    int ans = 0;
    for (int i = 1; i <= n; i ++)
    {
        ans += Odd(n, i);
    }
    return ans;
}

int answer3(int n)
{
    int ans = 0;
    for (int i = 1; i <= n; i ++)
    {
        ans += Count_Subsets(n, i);
    }
    return ans;
}

/*int answer2(int n, int m)
{
    if(n >= 1 && m == 0) return 0;
    if(n >= 1 && m == 1) return 1;
    if(m > 1) return answer2(n, m -1) + answer2(n - m, m);
    return 0;
}*/

int answer1(int n, int m)
{
    if (n < 1 || m < 1) return 0;
    if (n == 1 || m == 1) return 1;
    if (n < m) return answer1(n, n);
    if (n == m) return answer1(n, m - 1) + 1;
    return answer1(n , m - 1) + answer1(n - m, m);
}

int main ()
{
    int n, m;
    scanf("%d %d", &n, &m);
    int ans1 = answer1(n, m);
    int ans2 = answer4(n);
    /*1, 2*/
    /*if (n < m) m = n;
    for (int i = 0; i <= n; i ++)
    {
        for (int j = 0; j <= m; j ++)   dp[i][j] = 0;
    }
    for (int i = 1; i <= n; i ++)
    {
        dp[i][1] = 1;
        dp[1][i] = 1;
        dp[0][i] = 1; //
    }
    for (int i = 1; i <= n; i ++)
    {
        for (int j = 2; j <= i; j ++)
        {
            if (j > i)  dp[i][j] = dp[i][i];
            else  dp[i][j] = dp[i][j - 1] + dp[i - j][j];
        }
    }*/

    printf("%d %d %d %d", ans1, ans1, ans2, ans2);
}
