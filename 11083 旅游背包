#include<iostream>
#include<algorithm>
using namespace std;

int dp[51][1001][501]= {0};
int v[51];
int w[51];
int c[51];
int t[51];
int n, V, W;
void Knapsack()
{

    for(int x = 0; x <= V; x ++)
    {
        for(int y = 0; y <= W; y ++)
        {
            if((x / v[1]>0) && (y / w[1]>0)) dp[1][x][y] = min(min(x / v[1], y / w[1]), c[1]) * t[1];
            else dp[1][x][y] = 0;
        }
    }



    for(int i = 2; i <= n; i++)
    {
        for(int x = 0; x <= V; x++)
        {
            for(int y = 0; y <= W; y++)
            {
                int tmp = dp[i-1][x][y];
                if((x >= v[i]) && (y >= w[i]))
                {
                    int cnt = min(min(x / v[i],y / w[i]), c[i]);
                    for(int k = 0; k <= cnt; k++)
                    {
                        if((dp[i - 1][x - k * v[i]][y - k * w[i]] + k * t[i]) > tmp)
                            tmp = (dp[i - 1][x - k * v[i]][y - k * w[i]] + k * t[i]);
                        //dp[i][x][y] = max(dp[i - 1][x][y], (dp[i - 1][x - k * v[i]][y - k * w[i]] + k * t[i])); XXXXXXX错的
                    }
                    dp[i][x][y] = tmp;
                }
                else
                    dp[i][x][y] = dp[i - 1][x][y];
            }
        }
    }

}


int main()
{
    cin>>n>>V>>W;

    for(int i = 1; i <= n; i++) cin >> v[i]>>w[i]>>c[i]>>t[i];

    Knapsack();

    cout << dp[n][V][W];
    return 0;
}


