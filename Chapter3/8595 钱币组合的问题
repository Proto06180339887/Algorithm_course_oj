#include<iostream>
#include<cstdio>
#include<algorithm>
using namespace std;
#define MAXINT 20001
int dp1[51][20001] = {0};
int dp2[51][20001] = {0};
int v[51], k[51];
int m, n;
int helper1()
{
    for (int i = 1; i <= n; i ++) dp1[i][0] = 1; //这里是1
    for (int j = 1; j <= m; j ++)
    {
        if (j % v[1] == 0 && j / v[1] <= k[1]) dp1[1][j] = 1;
        else if (j % v[1] != 0 || j / v[1] > k[1]) dp1[1][j] = 0;
    }

    for (int i = 2; i <= n; i ++)
    {
        for (int j = 0; j <= m; j ++)   //j不能从v[i]开始，会造成某些数据丢失
        {
            dp1[i][j] = dp1[i - 1][j];                  //注意p <= k[i]这个条件
            for (int p = 1; p <= j / v[i] && p <= k[i]; p ++) dp1[i][j] += dp1[i - 1][j - p * v[i]];
        }
    }
    return dp1[n][m];
}

int helper2()
{
    for (int i = 1; i <= n; i ++) dp2[i][0] = 0;   //这里为0
    for (int j = 1; j <= m; j ++)
    {
        if (j % v[1] == 0 && j / v[1] <= k[1]) dp2[1][j] = j / v[1];
        else if (j % v[1] != 0 || j / v[1] > k[1]) dp2[1][j] = MAXINT;
    }

    for (int i = 2; i <= n; i ++)
    {
        for (int j = 0; j <= m; j ++)           //j不能从v[i]开始，会造成某些数据丢失
        {
            int t = min((j / v[i]), k[i]);
            int tmp = dp2[i - 1][j];
            for (int p = 1; p <= t; p ++)
            {
                if ((dp2[i - 1][j - p * v[i]] + p) < tmp) tmp = dp2[i - 1][j - p * v[i]] + p;
            }
            dp2[i][j] = tmp;
        }
    }
    return dp2[n][m];
}

int main()
{
    cin >> n;
    for (int i = 1; i <= n; i ++) cin >> v[i];
    for (int i = 1; i <= n; i ++) cin >> k[i];
    cin >> m;

    printf("%d\n", helper1());
    int ans = helper2();
    if (ans == MAXINT) printf("no possible");
    else printf("%d", ans);
    return 0;
}
