#include<cstdio>
#include<vector>
#include<cmath>
#include<algorithm>
using namespace std;

int a[100];
int dp[100][100] = {0};

int sum_a(int left, int right)
{
    int sum = 0;
    for (int i = left; i <= right; i ++)
    {
        sum += a[i];
    }
    return sum;
}

int minScore(int n)
{
    for (int i = 2; i <= n; i ++)
    {
        for (int j = 0; j < n - i + 1; j ++)
        {
            int t = j + i - 1;
            dp[j][t] = dp[j][t - 1] + sum_a(j, t);//accumulate(a + j, a + t + 1, 0);
            for (int k = j; k < t; k ++)
            {
                dp[j][t] = min(((dp[j][k] + dp[k + 1][t]) + sum_a(j, t)), dp[j][t]);
            }

        }
    }
    return dp[0][n - 1];
}

int maxScore(int n)
{
    for (int i = 2; i <= n; i ++)
    {
        for (int j = 0; j < n - i + 1; j ++)
        {
            int t = j + i - 1;
            dp[j][t] = dp[j][t - 1] + sum_a(j, t);//accumulate(a + j, a + t + 1, 0);
            for (int k = j; k < t; k ++)
            {
                dp[j][t] = max(((dp[j][k] + dp[k + 1][t]) + sum_a(j, t)), dp[j][t]);
            }

        }
    }
    return dp[0][n - 1];
}

int minScore_circular(int n)
{
    int minVal = minScore(n);
    for (int i = 0; i < n - 1; i ++)
    {
        int temp = a[0];
        for (int j = 0; j < n - 1; j ++)
        {
            a[j] = a[j + 1];
        }
        a[n - 1] = temp;
        if (minVal > minScore(n))   minVal = minScore(n);
    }
    return minVal;
}

int maxScore_circular(int n)
{
    int maxVal = maxScore(n);
    for (int i = 0; i < n - 1; i ++)
    {
        int temp = a[0];
        for (int j = 0; j < n - 1; j ++)
        {
            a[j] = a[j + 1];
        }
        a[n - 1] = temp;
        if (maxVal < maxScore(n))   maxVal = maxScore(n);
    }
    return maxVal;
}

int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 0; i < n; i ++)
    {
        scanf("%d", &a[i]);
    }

    for (int i = 0; i < n; i ++)
    {
        dp[i][i] = 0;
    }
    int ans1 = minScore(n);
    int ans2 = maxScore(n);
    int ans3 = minScore_circular(n);
    int ans4 = maxScore_circular(n);
    printf("%d %d\n%d %d", ans1, ans2, ans3, ans4);

}
